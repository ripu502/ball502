{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","series","name","data","options","chart","height","type","zoom","enabled","dataLabels","stroke","curve","title","text","align","grid","row","colors","opacity","xaxis","categories","bounce","e","h","isloaded","componentDidMount","axios","get","then","res","console","log","heights","times","tempopt","tempaxis","temph","setState","coefhander","event","target","value","post","response","time","heighthander","content","this","Fragment","id","color","width","onChange","min","max","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fc8be254.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport ReactApexChart from 'react-apexcharts';\nimport axios from 'axios';\nimport ReactLoading from 'react-loading';\n\n\nclass App extends React.Component {\n  state = {\n    series:\n      [{\n        name: \"Height\",\n        data: [90, 80, 70, 60, 49, 40, 30, 31, 0]\n      }],\n    options:\n    {\n      chart:\n      {\n        height: 350,\n        type: 'line',\n        zoom: {\n          enabled: false\n        }\n      },\n      dataLabels:\n      {\n        enabled: false\n      },\n      stroke:\n      {\n        curve: 'smooth'\n      },\n      title:\n      {\n        text: 'Bouncing ball sketch',\n        align: 'left'\n      },\n      grid:\n      {\n        row:\n        {\n          colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns\n          opacity: 0.5\n        },\n      },\n      xaxis:\n      {\n        categories: [\"0\"],\n      }\n    },\n    bounce: '',\n    e: null,\n    h: null,\n    isloaded: false\n  };\n  componentDidMount = () => {\n\n    axios.get('https://ball502.herokuapp.com/').then(res => {\n      console.log(res.data)\n      const heights = res.data.height\n      const times = res.data.times\n      let tempopt = { ...this.state.options };\n      let tempaxis = { ...tempopt.xaxis };\n      tempaxis.categories = times;\n      tempopt.xaxis = tempaxis;\n      let temph = [{\n        name: \"Height\",\n        data: heights,\n      }];\n      this.setState({\n        bounce: res.data.bounce,\n        series: temph,\n        options: tempopt,\n        isloaded: true,\n        h: res.data.h,\n        e: res.data.e * 10\n      })\n    })\n  }\n  coefhander = (event) => {\n    this.setState({\n      isloaded: false\n    })\n    this.setState({\n      e: event.target.value,\n    })\n    const data = {\n      \"height\": this.state.h,\n      \"e\": this.state.e / 10\n    }\n    axios.post('https://ball502.herokuapp.com/', data).then(res => {\n      console.log(res.data);\n      if (res.data.response === 'done') {\n        axios.get('https://ball502.herokuapp.com/').then(res => {\n          const heights = res.data.height\n          const times = res.data.time\n          let tempopt = { ...this.state.options };\n          let tempaxis = { ...tempopt.xaxis };\n          tempaxis.categories = times;\n          tempopt.xaxis = tempaxis;\n          let temph = [{\n            name: \"Height\",\n            data: heights,\n          }];\n          this.setState({\n            bounce: res.data.bounce,\n            series: temph,\n            options: tempopt,\n            isloaded: true\n          })\n        })\n      }\n    })\n  }\n  heighthander = (event) => {\n    this.setState({\n      isloaded: false\n    })\n    this.setState({\n      h: event.target.value,\n    })\n    const data = {\n      \"height\": event.target.value,\n      \"e\": this.state.e / 10\n    }\n    axios.post('https://ball502.herokuapp.com/', data).then(res => {\n      if (res.data.response === 'done') {\n        axios.get('https://ball502.herokuapp.com/').then(res => {\n          const heights = res.data.height\n          const times = res.data.time\n          let tempopt = { ...this.state.options };\n          let tempaxis = { ...tempopt.xaxis };\n          tempaxis.categories = times;\n          tempopt.xaxis = tempaxis;\n          let temph = [{\n            name: \"Height\",\n            data: heights,\n          }];\n          this.setState({\n            bounce: res.data.bounce,\n            series: temph,\n            options: tempopt,\n            isloaded: true\n          })\n        })\n      }\n    })\n  }\n  render() {\n    let content = null;\n    if (this.state.isloaded) {\n      content = (<React.Fragment><div id=\"chart\">\n        <ReactApexChart\n          options={this.state.options}\n          series={this.state.series}\n          type=\"line\" height={350} />\n      </div>\n        <p>No. of bounces Made by the ball is: <b>{this.state.bounce} times </b></p>\n      </React.Fragment>)\n    } else {\n      content = (<ReactLoading\n        type='cubes'\n        color='#439CFB'\n        height={'30%'}\n        width={'20%'} />)\n    }\n    return (\n      <div>\n        <h1> Bouncing Ball App\n        </h1>\n        <hr />\n        {content}\n        <p>\n          change Height of Ball:  < input\n            type=\"Number\"\n            name=\"h\"\n            value={this.state.h}\n            onChange={this.heighthander} />\n        </p>\n        <p>\n          Change the value of <b>Coefficient of restitution {this.state.e / 10}</b>: <input\n            name=\"e\"\n            type=\"range\"\n            min=\"1\"\n            max=\"7\"\n            value={this.state.e}\n            onChange={this.coefhander} />\n        </p>\n        <p>Height of the Ball is: <b>{this.state.h}m </b></p>\n      </div >\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}